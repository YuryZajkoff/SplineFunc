#pragma once
//==================================================================================================
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Метод прогонки для решения систем линейных уравнений
//==================================================================================================
#ifndef _GCPP18_MATH_LIN_EQ_SWEEP_METHOD_H_
#define _GCPP18_MATH_LIN_EQ_SWEEP_METHOD_H_
//--------------------------------------------------------------------------------------------------
//#include "NumTypes.h"
//==================================================================================================
#define ARRAY_MAX 100 // Максимальное значение узлов интерполяции (значений по x и y)



namespace GCPP18
{
	class TSysLinEqSolverThomasAlg
	{
	public:

		// Структура, с коэффициентами для уравнений для каждого С 
		// (где С - это также коэф для сплайн-функций)
		struct TRatios_Equation
		{
			float a, b, c, d;
		};

		// Возвращает true, если удалось рассчитать. Если уравнений меньше 2, возвращает false.
		//static bool Calc( const std::vector<TRatios_Equation> &EqC, std::vector<float_t> *X );

		// Возвращает true, если удалось рассчитать. Если уравнений меньше 2, возвращает false
		static bool Calc_temp(float* C, TRatios_Equation* ptr_ThomasAlgEqC_Ratio, unsigned size_XY);

	private:

		// Структура, хранящая промежуточные коэф ддля метода прогонки
		struct TIntermediate_Ratio_Eq_AB
		{
			float A, B;
		};
	};
} // namespace GCPP18
#endif